import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as e}from"./app-D7KlGvaD.js";const t={};function p(l,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="sprague-grundy定理" tabindex="-1"><a class="header-anchor" href="#sprague-grundy定理"><span>Sprague-Grundy定理</span></a></h1><h2 id="定理说明" tabindex="-1"><a class="header-anchor" href="#定理说明"><span>定理说明</span></a></h2><h3 id="无偏博弈" tabindex="-1"><a class="header-anchor" href="#无偏博弈"><span>无偏博弈</span></a></h3><p>无偏博弈需要满足以下条件：</p><ol><li>双方玩家的行动规则相同。</li><li>游戏结果只与行动有关，与玩家身份无关。也就是说，游戏的胜负判定标准对两位玩家是一样的，像是警察抓小偷就不是。</li><li>游戏在有限步内结束，没有平局</li><li>所有信息公开。</li></ol><h3 id="nim游戏与nim数" tabindex="-1"><a class="header-anchor" href="#nim游戏与nim数"><span>Nim游戏与Nim数</span></a></h3><p>接下来我们介绍一种无偏博弈的例子：Nim游戏。<br> 有若干堆石子，每堆有若干颗，每次玩家可以从任意一堆中拿走任意数量（不为零）的石子，拿走最后一颗石子的玩家获胜。</p><p>下面我们介绍Nim数<br> 首先我们需要知道一个函数叫mex<br> mex(S) = min{n | n ∉ S}，即S中最小的非负整数。用C++代码表示就是：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(m)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        m</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，对于一个未排序的数组，也是有O(n)的时间计算mex的，这个我们在附录中介绍。<br> 每个状态的Nim数是所有后继状态的Nim数的mex。<br> 那么拿到了Nim数可以干嘛呢？</p>`,10)]))}const d=s(t,[["render",p]]),k=JSON.parse('{"path":"/posts/%E7%9F%A5%E8%AF%86/%E6%95%B0%E5%AD%A6/Sprague%E2%80%93Grundy%E5%AE%9A%E7%90%86.html","title":"Sprague-Grundy定理","lang":"zh-CN","frontmatter":{"description":"Sprague-Grundy定理 定理说明 无偏博弈 无偏博弈需要满足以下条件： 双方玩家的行动规则相同。 游戏结果只与行动有关，与玩家身份无关。也就是说，游戏的胜负判定标准对两位玩家是一样的，像是警察抓小偷就不是。 游戏在有限步内结束，没有平局 所有信息公开。 Nim游戏与Nim数 接下来我们介绍一种无偏博弈的例子：Nim游戏。 有若干堆石子，每堆有...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Sprague-Grundy定理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-20T03:11:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Pojis\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E7%9F%A5%E8%AF%86/%E6%95%B0%E5%AD%A6/Sprague%E2%80%93Grundy%E5%AE%9A%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Sprague-Grundy定理"}],["meta",{"property":"og:description","content":"Sprague-Grundy定理 定理说明 无偏博弈 无偏博弈需要满足以下条件： 双方玩家的行动规则相同。 游戏结果只与行动有关，与玩家身份无关。也就是说，游戏的胜负判定标准对两位玩家是一样的，像是警察抓小偷就不是。 游戏在有限步内结束，没有平局 所有信息公开。 Nim游戏与Nim数 接下来我们介绍一种无偏博弈的例子：Nim游戏。 有若干堆石子，每堆有..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-20T03:11:51.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-20T03:11:51.000Z"}]]},"git":{"createdTime":1750389111000,"updatedTime":1750389111000,"contributors":[{"name":"Pojis","username":"Pojis","email":"221220001@smail.nju.edu.cn","commits":1,"url":"https://github.com/Pojis"}]},"readingTime":{"minutes":1.03,"words":309},"filePathRelative":"posts/知识/数学/Sprague–Grundy定理.md","excerpt":"\\n<h2>定理说明</h2>\\n<h3>无偏博弈</h3>\\n<p>无偏博弈需要满足以下条件：</p>\\n<ol>\\n<li>双方玩家的行动规则相同。</li>\\n<li>游戏结果只与行动有关，与玩家身份无关。也就是说，游戏的胜负判定标准对两位玩家是一样的，像是警察抓小偷就不是。</li>\\n<li>游戏在有限步内结束，没有平局</li>\\n<li>所有信息公开。</li>\\n</ol>\\n<h3>Nim游戏与Nim数</h3>\\n<p>接下来我们介绍一种无偏博弈的例子：Nim游戏。<br>\\n有若干堆石子，每堆有若干颗，每次玩家可以从任意一堆中拿走任意数量（不为零）的石子，拿走最后一颗石子的玩家获胜。</p>\\n<p>下面我们介绍Nim数<br>\\n首先我们需要知道一个函数叫mex<br>\\nmex(S) = min{n | n ∉ S}，即S中最小的非负整数。用C++代码表示就是：</p>","autoDesc":true}');export{d as comp,k as data};

import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as t,o as e}from"./app-D7KlGvaD.js";const h={};function n(r,i){return e(),a("div",null,i[0]||(i[0]=[t('<h1 id="神经网络" tabindex="-1"><a class="header-anchor" href="#神经网络"><span>神经网络</span></a></h1><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h2><h3 id="神经网络的结构" tabindex="-1"><a class="header-anchor" href="#神经网络的结构"><span>神经网络的结构</span></a></h3><p>随着生物学的发展，计算机科学家们发现，我们为什么不直接模拟生物的大脑呢？</p><p>在计算机中，一个神经网络是由多个神经元组成的，每个神经元都有输入和输出。每个神经元的输入是前一层神经元的输出。</p><p>目前，你只要知道线性层就行了。它是核心。</p><p>当然，上面说的只是模型结构，实际上要想运行起来，还需要有损失函数和优化器，在下面这个例子中我们会详细介绍。</p><h3 id="利用神经网络拟合直线" tabindex="-1"><a class="header-anchor" href="#利用神经网络拟合直线"><span>利用神经网络拟合直线</span></a></h3><p>现在给定一个最简单的问题，我们有(1,3),(2,4)这两个数据点，我们想要拟合出一条直线。这就可以使用一个简单的神经网络来实现。</p><h4 id="模型结构" tabindex="-1"><a class="header-anchor" href="#模型结构"><span>模型结构</span></a></h4><p>这里我们模型就一行：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Linear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">in_features</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">out_features</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Linear表示这是个线性层。in_features表示输入的特征数，out_features表示输出的特征数。这里因为我们要拟合一条二维直线，所以输入和输出都是1。</p><h4 id="损失函数" tabindex="-1"><a class="header-anchor" href="#损失函数"><span>损失函数</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">criterion </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nn.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">MSELoss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 损失函数：均方误差</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>神经网络的训练过程是：先随机和神经元初始化参数，然后根据输入和输出调整这个参数，使其的输出和目标值尽量接近。</p><p>那么问题来了，假如我最后想要得到一条直线，但是数据点只要有3个及以上，就很有可能并不能用一条直接去拟合出来。这时候，就需要选择一个标准，比如说是平方最小啦，还是绝对值最小啦。是不是有点熟悉？没错，它和归纳偏好有点像。</p><p>这里我们采用均方误差作为损失函数。目前，你不需要知道均方误差是什么。</p><h4 id="优化器" tabindex="-1"><a class="header-anchor" href="#优化器"><span>优化器</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">optimizer </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> optim.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">SGD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">parameters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 优化器：随机梯度下降</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里我们使用的是随机梯度下降法。下一节我们会着重介绍梯度和优化器。</p><h4 id="模型的训练" tabindex="-1"><a class="header-anchor" href="#模型的训练"><span>模型的训练</span></a></h4><h2 id="神经网络的层" tabindex="-1"><a class="header-anchor" href="#神经网络的层"><span>神经网络的层</span></a></h2><h2 id="梯度和优化器" tabindex="-1"><a class="header-anchor" href="#梯度和优化器"><span>梯度和优化器</span></a></h2><h2 id="激活函数" tabindex="-1"><a class="header-anchor" href="#激活函数"><span>激活函数</span></a></h2><h3 id="利用神经网络求异或" tabindex="-1"><a class="header-anchor" href="#利用神经网络求异或"><span>利用神经网络求异或</span></a></h3><p>思考一下，逻辑与怎么办？</p><p>答案是输出处理一下就行了，直接把两个数加起来，小于2判定为false即可。这叫做线性可分。</p><p>异或函数的真值表如下：</p><table><thead><tr><th>输入 A</th><th>输入 B</th><th>输出 A XOR B</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><h3 id="softmax" tabindex="-1"><a class="header-anchor" href="#softmax"><span>Softmax</span></a></h3>',31)]))}const l=s(h,[["render",n]]),k=JSON.parse('{"path":"/posts/%E6%8A%80%E6%9C%AF/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.html","title":"神经网络","lang":"zh-CN","frontmatter":{"description":"神经网络 引入 神经网络的结构 随着生物学的发展，计算机科学家们发现，我们为什么不直接模拟生物的大脑呢？ 在计算机中，一个神经网络是由多个神经元组成的，每个神经元都有输入和输出。每个神经元的输入是前一层神经元的输出。 目前，你只要知道线性层就行了。它是核心。 当然，上面说的只是模型结构，实际上要想运行起来，还需要有损失函数和优化器，在下面这个例子中我们...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"神经网络\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T03:53:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Pojis\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E6%8A%80%E6%9C%AF/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"神经网络"}],["meta",{"property":"og:description","content":"神经网络 引入 神经网络的结构 随着生物学的发展，计算机科学家们发现，我们为什么不直接模拟生物的大脑呢？ 在计算机中，一个神经网络是由多个神经元组成的，每个神经元都有输入和输出。每个神经元的输入是前一层神经元的输出。 目前，你只要知道线性层就行了。它是核心。 当然，上面说的只是模型结构，实际上要想运行起来，还需要有损失函数和优化器，在下面这个例子中我们..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T03:53:37.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T03:53:37.000Z"}]]},"git":{"createdTime":1745673962000,"updatedTime":1745726017000,"contributors":[{"name":"Pojis","username":"Pojis","email":"221220001@smail.nju.edu.cn","commits":2,"url":"https://github.com/Pojis"}]},"readingTime":{"minutes":2.17,"words":651},"filePathRelative":"posts/技术/机器学习/神经网络.md","excerpt":"\\n<h2>引入</h2>\\n<h3>神经网络的结构</h3>\\n<p>随着生物学的发展，计算机科学家们发现，我们为什么不直接模拟生物的大脑呢？</p>\\n<p>在计算机中，一个神经网络是由多个神经元组成的，每个神经元都有输入和输出。每个神经元的输入是前一层神经元的输出。</p>\\n<p>目前，你只要知道线性层就行了。它是核心。</p>\\n<p>当然，上面说的只是模型结构，实际上要想运行起来，还需要有损失函数和优化器，在下面这个例子中我们会详细介绍。</p>\\n<h3>利用神经网络拟合直线</h3>\\n<p>现在给定一个最简单的问题，我们有(1,3),(2,4)这两个数据点，我们想要拟合出一条直线。这就可以使用一个简单的神经网络来实现。</p>","autoDesc":true}');export{l as comp,k as data};
